syntax = "proto3";
package limit.event;

option go_package = "github.com/Limit-IM/limit-sdk-go/proto/event";

import "auth.proto";
import "event.types.proto";

message Event {
    // uuid of the event
    // better uuid v7 for sql better performance
    // could only be empty for sender
    string event_id = 1;
    // sent time of the event
    uint64 ts = 2;
    // sender uuid of the event
    string sender = 3;
    // event data
    oneof detail {
        limit.event.types.Message message = 4;
    }
}

message ReceiveEventRequest {
    repeated Event events = 1;
}

service EventService {
    // receiving all events from the server
    rpc ReceiveEvents (ReceiveEventsRequest) returns (stream Event);
    // sending event to the server
    // if receiver is another server, the event will be forwarded to the receiver
    rpc SendEvent (SendEventRequest) returns (SendEventResponse);
    // synchronize from server
    rpc Synchronize(SynchronizeRequest) returns (SynchronizeResponse);
}

message ReceiveEventsRequest {
    // auth
    limit.auth.Auth token = 1;
}

message SendEventRequest {
    // auth
    limit.auth.Auth token = 1;
    // event
    Event event = 2;
}

message SendEventResponse {
    // event id
    string event_id = 1;
}

message SynchronizeRequest {
    // auth
    limit.auth.Auth token = 1;
    oneof from {
        // synchronization start timestamp
        uint64 ts_from = 3;
        // the ID of the event to start synchronization
        string id_from = 4;
    }
    oneof to {
        // synchronization end timestamp
        uint64 ts_to = 5;
        // the ID of the event to start synchronization
        string id_to = 6;
    }
    uint32 count = 7;
}

message SynchronizeResponse {
    repeated limit.event.Event events = 1;
}
